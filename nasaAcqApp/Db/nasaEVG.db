#
# Global acquisition control.
# Fanned out by the event generator.
# Hardwire the first node to be the event generator.
#
record(bo, "$(P)ACQ:enable") {
    field(DESC, "Enable/disable data acquisition")
    field(DTYP, "FEED Register Write")
    field(OUT,  "@name=$(PORT) reg=ACQ:enable")
    field(ZNAM, "Disable")
    field(ONAM, "Enable")
}

record(mbbo, "$(P)ACQ:rate") {
    field(DESC, "Set acquisition rate")
    field(PINI, "YES")
    field(ZRVL, "250000")
    field(ZRST, "250 kHz")
    field(ONVL, "50000")
    field(ONST, "50 kHz")
    field(TWVL, "10000")
    field(TWST, "10 kHz")
    field(THVL, "5000")
    field(THST, "5 kHz")
    field(FRVL, "1000")
    field(FRST, "1 kHz")
    field(VAL,  "0")
    field(FLNK, "$(P)ACQ:rateLO_")
    info(autosaveFields_pass0, "VAL")
}
# We want the per-FPGA records to process each time the mbbo above processes.
# The MBBO record, unfortunately, does not have an MDEL field, so we have to
# fake it here with this longout.  The per-FPGA records monitor this longout.
record(longout, "$(P)ACQ:rateLO_") {
    field(DESC, "Send monitors to per-FPGA records")
    field(DOL,  "$(P)ACQ:rate.RVAL")
    field(OMSL, "closed_loop")
    field(MDEL, "-1")
}

# system wide reference DRDY:pps for comparison and alarming
alias("$(P)01:DRDY:pps", "$(P)DRDY:pps")

# system wide, used by acquisition sequencer
record(lso, "$(P)SA:DESC") {
    field(SIZV, "128")
    field(PINI, "YES")
    info(autosaveFields_pass1, "VAL")
}
record(lso, "$(P)SA:CUST") {
    field(SIZV, "128")
    field(PINI, "YES")
    info(autosaveFields_pass1, "VAL")
}
record(lso, "$(P)SA:FACLITY") {
    field(SIZV, "128")
    field(PINI, "YES")
    info(autosaveFields_pass1, "VAL")
}
record(lso, "$(P)SA:PROJ") {
    field(SIZV, "128")
    field(PINI, "YES")
    info(autosaveFields_pass1, "VAL")
}
record(lso, "$(P)SA:OPER") {
    field(SIZV, "128")
    field(PINI, "YES")
    info(autosaveFields_pass1, "VAL")
}
record(lso, "$(P)SA:FILE") {
    field(SIZV, "128")
    field(PINI, "YES")
    info(autosaveFields_pass1, "VAL")
}
record(lso, "$(P)SA:FILEHASH") {
    field(SIZV, "128")
    field(PINI, "YES")
    info(autosaveFields_pass1, "VAL")
}

record(calc, "$(P)SA:READY:1_") {
    field(INPA, "$(P)01:RDY CP MS")
    field(INPB, "$(P)02:RDY CP MS")
    field(INPC, "$(P)03:RDY CP MS")
    field(INPD, "$(P)04:RDY CP MS")
    field(INPE, "$(P)05:RDY CP MS")
    field(INPF, "$(P)06:RDY CP MS")
    field(INPG, "$(P)07:RDY CP MS")
    field(INPH, "$(P)08:RDY CP MS")
    field(INPI, "$(P)09:RDY CP MS")
    field(INPJ, "$(P)10:RDY CP MS")
    field(INPK, "$(P)11:RDY CP MS")
    field(INPL, "$(P)12:RDY CP MS")
    field(CALC, "A&&B&&C&&D&&E&&F&&G&&H&&I&&J&&K&&L")
    field(FLNK, "$(P)SA:READY:3_")
}
record(calc, "$(P)SA:READY:2_") {
    field(INPA, "$(P)13:RDY CP MS")
    field(INPB, "$(P)14:RDY CP MS")
    field(INPC, "$(P)15:RDY CP MS")
    field(INPD, "$(P)16:RDY CP MS")
    field(INPE, "$(P)17:RDY CP MS")
    field(INPF, "$(P)18:RDY CP MS")
    field(INPG, "$(P)19:RDY CP MS")
    field(INPH, "$(P)20:RDY CP MS")
    field(INPI, "$(P)21:RDY CP MS")
    field(INPJ, "$(P)22:RDY CP MS")
    field(INPK, "$(P)23:RDY CP MS")
    field(INPL, "$(P)24:RDY CP MS")
    field(CALC, "A&&B&&C&&D&&E&&F&&G&&H&&I&&J&&K&&L")
    field(FLNK, "$(P)SA:READY:3_")
}
record(calcout, "$(P)SA:READY:3_") {
    field(INPA, "$(P)SA:READY:1_ MS")
    field(INPB, "$(P)SA:READY:2_ MS")
    field(INPC, "$(P)25:RDY CP MS")
    field(INPD, "$(P)26:RDY CP MS")
    field(INPE, "$(P)27:RDY CP MS")
    field(INPF, "$(P)28:RDY CP MS")
    field(INPG, "$(P)29:RDY CP MS")
    field(INPH, "$(P)30:RDY CP MS")
    field(INPI, "$(P)31:RDY CP MS")
    field(INPJ, "$(P)32:RDY CP MS")
    field(CALC, "A&&B&&C&&D&&E&&F&&G&&H&&I&&J")
    field(OUT , "$(P)SA:READY PP MS")
}
record(bi, "$(P)SA:READY") {
    field(DESC, "System ready to record")
    field(ZNAM, "Not Ready")
    field(ONAM, "Ready")
    field(ZSV , "MAJOR")
}
