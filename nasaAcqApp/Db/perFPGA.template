
record("*", "$(P)APP:IPADDR") {
    info(autosaveFields_pass0, "") # inhibit autosave.  IP managed only through iocsh
}

record(longin, "$(P)$(R)C_") {
    field(DTYP, "FEED On Connect")
    field(INP , "@name=$(PORT)")
    field(SCAN, "I/O Intr")
    field(PHAS, "0")
    field(FLNK, "$(P)$(R)C:F_")
}
record(fanout, "$(P)$(R)C:F_") {
    field(LNK1, "$(P)$(R)ACQ:rate_")
    field(LNK2, "$(P)$(R)ACQ:enable:XX_")
    field(LNK3, "$(P)$(R)ACQ:coupling:XX_")
    field(LNK4, "$(P)$(R)ACQ:LOLOlimXX_")
    field(LNK5, "$(P)$(R)ACQ:LOlimXX_")
    field(LNK6, "$(P)$(R)ACQ:HIlimXX_")
    field(LNK7, "$(P)$(R)ACQ:HIHIlimXX_")
    field(LNK8, "$(P)$(R)Quartz:serno")
    field(LNK9, "$(P)$(R)Quartz:partno")
    field(LNKA, "$(P)$(R)MPS:required")
    field(LNKB, "$(P)$(R)MPS:invert")
}
# flush out array registers previously initialized in perChannel.template during PHAS=-1
record(bo, "$(P)$(R)ACQ:enable:XX_") {
    field(DTYP, "FEED Register Flush")
    field(OUT,  "@name=$(PORT) reg=ACQ:enable:XX")
}
record(bo, "$(P)$(R)ACQ:coupling:XX_") {
    field(DTYP, "FEED Register Flush")
    field(OUT,  "@name=$(PORT) reg=ACQ:coupling:XX")
}
record(bo, "$(P)$(R)ACQ:LOLOlimXX_") {
    field(DTYP, "FEED Register Flush")
    field(OUT,  "@name=$(PORT) reg=ACQ:LOLOlimXX")
}
record(bo, "$(P)$(R)ACQ:LOlimXX_") {
    field(DTYP, "FEED Register Flush")
    field(OUT,  "@name=$(PORT) reg=ACQ:LOlimXX")
}
record(bo, "$(P)$(R)ACQ:HIlimXX_") {
    field(DTYP, "FEED Register Flush")
    field(OUT,  "@name=$(PORT) reg=ACQ:HIlimXX")
}
record(bo, "$(P)$(R)ACQ:HIHIlimXX_") {
    field(DTYP, "FEED Register Flush")
    field(OUT,  "@name=$(PORT) reg=ACQ:HIHIlimXX")
}

record(longin, "$(P)$(R)Quartz:serno") {
    field(DESC, "Quartz IPMI serial number")
    field(DTYP, "FEED Register Read")
    field(INP,  "@name=$(PORT) reg=FMC1:SerialNumber")
}
record(longin, "$(P)$(R)Quartz:partno") {
    field(DESC, "Quartz IPMI part number")
    field(DTYP, "FEED Register Read")
    field(INP,  "@name=$(PORT) reg=FMC1:PartNumber")
    field(LOLO, "100")
    field(LLSV, "MAJOR")
}

record(longin, "$(P)$(R)DRDY:history") {
    field(DESC, "DRDY mini-logic analyzer")
    field(DTYP, "FEED Register Read")
    field(INP,  "@name=$(PORT) reg=DRDY:history")
}
record(longin, "$(P)$(R)Quartz:ADC:statuses") {
    field(DESC, "Quartz AD7768 status registers")
    field(DTYP, "FEED Register Read")
    field(INP,  "@name=$(PORT) reg=ADC:statuses")
}
record(aai, "$(P)$(R)Quartz:ADC:headers") {
    field(DESC, "Quartz AD7768 headers")
    field(DTYP, "FEED Register Read")
    field(INP,  "@name=$(PORT) reg=ADC:headers")
    field(FTVL, "UCHAR")
    field(NELM, "32")
}
record(longin, "$(P)$(R)ACQ:seqno") {
    field(DESC, "Packet builder sequence number")
    field(DTYP, "FEED Register Read")
    field(INP,  "@name=$(PORT) reg=ACQ:seqno")
}

#
# DCLK/DRDY waveform recorder
#
record(bi, "$(P)$(R)ADC:WFR:status") {
    field(DESC, "DCLK/DRDY waveform recorder status")
    field(DTYP, "FEED Register Read")
    field(INP,  "@name=$(PORT) reg=ADC:WFR:busy")
    field(ZNAM, "Idle")
    field(ONAM, "Busy")
    field(SCAN, "10 second")
}
record(bo, "$(P)$(R)ADC:WFR:start") {
    field(DESC, "DCLK/DRDY recorder start/trigger")
    field(DTYP, "FEED Register Flush")
    field(OUT,  "@name=$(PORT) reg=ADC:WFR:start")
    field(ZNAM, "Start/trigger")
    field(ONAM, "Start/trigger")
}

#
# Push sampling rate to FPGA
#
record(longout, "$(P)$(R)ACQ:rate_") {
    field(DESC, "Set sampling rate")
    field(DTYP, "FEED Register Write")
    field(OUT,  "@name=$(PORT) reg=ACQ:rate")
    field(OMSL, "closed_loop")
    field(DOL , "$(EVG)ACQ:rateLO_ CPP AUTO")
    field(LOPR, "1000")
    field(HOPR, "250000")
    field(DRVL, "1000")
    field(DRVH, "250000")
}

#
# Reboot FPGA
# Driven directly by client
#
record(bo, "$(P)$(R)FPGA:reboot") {
    field(ZNAM, "Boot")
    field(ONAM, "Boot")
    field(FLNK, "$(P)$(R)FPGA:reboot_")
}
record(longout, "$(P)$(R)FPGA:reboot_") {
    field(DESC, "Write 1, 100, 10000 to reboot FPGA")
    field(DTYP, "FEED Register Write")
    field(OUT,  "@name=$(PORT) reg=FPGA:reboot")
    field(VAL , "100")
}

#
# Reset ADCs
#
record(bo, "$(P)$(R)Quartz:ADC:reset") {
    field(DESC, "Reset AD7768 ADCs")
    field(DTYP, "FEED Register Write")
    field(OUT,  "@name=$(PORT) reg=AD7768:reset")
    field(ZNAM, "Operate")
    field(ONAM, "Reset")
}

#
# Drive PLL VCXO DAC
#
record(longout, "$(P)$(R)PLL:VCXO_DAC") {
    field(DESC, "Non-zero to drive VCXO DAC directly")
    field(DTYP, "FEED Register Write")
    field(OUT,  "@name=$(PORT) reg=PLL:VCXO_DAC")
    field(LOPR, "-32768")
    field(HOPR, "32767")
    field(DRVL, "-32768")
    field(DRVH, "32767")
}

# Readout channel limit status masks
record(longin, "$(P)ACQ:HIHIstatus_") {
    field(DTYP, "FEED Register Read")
    field(INP , "@name=$(PORT) reg=ACQ:HIHIstatus")
    field(SCAN, ".1 second")
    field(FLNK, "$(P)ACQ:HIHIstatus")
}
record(mbbiDirect, "$(P)ACQ:HIHIstatus") {
    field(INP , "$(P)ACQ:HIHIstatus_ MSS")
    field(NOBT, "32")
}
record(longin, "$(P)ACQ:HIstatus_") {
    field(DTYP, "FEED Register Read")
    field(INP , "@name=$(PORT) reg=ACQ:HIstatus")
    field(SCAN, ".1 second")
    field(FLNK, "$(P)ACQ:HIstatus")
}
record(mbbiDirect, "$(P)ACQ:HIstatus") {
    field(INP , "$(P)ACQ:HIstatus_ MSS")
    field(NOBT, "32")
}
record(longin, "$(P)ACQ:LOstatus_") {
    field(DTYP, "FEED Register Read")
    field(INP , "@name=$(PORT) reg=ACQ:LOstatus")
    field(SCAN, ".1 second")
    field(FLNK, "$(P)ACQ:LOstatus")
}
record(mbbiDirect, "$(P)ACQ:LOstatus") {
    field(INP , "$(P)ACQ:LOstatus_ MSS")
    field(NOBT, "32")
}
record(longin, "$(P)ACQ:LOLOstatus_") {
    field(DTYP, "FEED Register Read")
    field(INP , "@name=$(PORT) reg=ACQ:LOLOstatus")
    field(SCAN, ".1 second")
    field(FLNK, "$(P)ACQ:LOLOstatus")
}
record(mbbiDirect, "$(P)ACQ:LOLOstatus") {
    field(INP , "$(P)ACQ:LOLOstatus_ MSS")
    field(NOBT, "32")
}

#
# MPS control/status
# FIXME: Should the 'tripped' record go into alarm state when non-zero?
#
record(mbboDirect, "$(P)$(R)MPS:required") {
    field(NOBT, "8")
    field(OUT, "$(P)$(R)MPS:required_ PP MS")
    field(VAL , "0xfc") # default to all required
    info(autosaveFields_pass0, "VAL")
}
record(longout, "$(P)$(R)MPS:required_") {
    field(DESC, "Bitmap of 'important' fiber links")
    field(DTYP, "FEED Register Write")
    field(OUT,  "@name=$(PORT) reg=MPS:required")
}
record(longin, "$(P)$(R)MPS:tripped") {
    field(DESC, "Bitmap of tripped outputs")
    field(DTYP, "FEED Register Read")
    field(INP,  "@name=$(PORT) reg=MPS:tripped")
    field(SCAN, "1 second")
}
record(mbboDirect, "$(P)$(R)MPS:invert") {
    field(NOBT, "8")
    field(OUT , "$(P)$(R)MPS:invert_ PP MS")
    field(VAL , "0")
    info(autosaveFields_pass0, "VAL")
}
record(longout, "$(P)$(R)MPS:invert_") {
    field(DESC, "Bitmap of inputs to invert")
    field(DTYP, "FEED Register Write")
    field(OUT,  "@name=$(PORT) reg=MPS:invert")
}
# Input status is reported identically by all 4 MPS:status:XX
# so only need to read once from output 1
record(bi, "$(P)$(R)MPS:input:01") {
    field(DTYP, "Raw Soft Channel")
    field(INP , "$(P)$(R)MPS:status:01 CP MS")
    field(SCAN, "I/O Intr")
    field(MASK, "0x10000")
    field(ZNAM, "Trip/Open")
    field(ONAM, "Normal/Close")
    field(ZSV , "MAJOR")
    field(FLNK, "$(P)$(R)MPS:input:02")
}
record(bi, "$(P)$(R)MPS:input:02") {
    field(DTYP, "Raw Soft Channel")
    field(INP , "$(P)$(R)MPS:status:01 MS")
    field(MASK, "0x20000")
    field(ZNAM, "Trip/Open")
    field(ONAM, "Normal/Close")
    field(ZSV , "MAJOR")
    field(FLNK, "$(P)$(R)MPS:input:03")
}
record(bi, "$(P)$(R)MPS:input:03") {
    field(DTYP, "Raw Soft Channel")
    field(INP , "$(P)$(R)MPS:status:01 MS")
    field(MASK, "0x40000")
    field(ZNAM, "Trip/Open")
    field(ONAM, "Normal/Close")
    field(ZSV , "MAJOR")
    field(FLNK, "$(P)$(R)MPS:input:04")
}
record(bi, "$(P)$(R)MPS:input:04") {
    field(DTYP, "Raw Soft Channel")
    field(INP , "$(P)$(R)MPS:status:01 MS")
    field(MASK, "0x80000")
    field(ZNAM, "Trip/Open")
    field(ONAM, "Normal/Close")
    field(ZSV , "MAJOR")
}

#
# Calibration
#
record(mbbi, "$(P)CAL:status") {
    field(DESC, "Calibration status")
    field(DTYP, "FEED Register Read")
    field(INP,  "@name=$(PORT) reg=calibrationStatus")
    field(PINI, "YES")
    field(ZRVL, "0")
    field(ZRST, "Valid")
    field(ONVL, "1")
    field(ONST, "Unread")
    field(TWVL, "2")
    field(TWST, "Read Fault")
    field(THVL, "3")
    field(THST, "Bad Header")
    field(FRVL, "4")
    field(FRST, "Bad Checksum")
    field(FVVL, "5")
    field(FVST, "Write Fault")
    field(SXVL, "6")
    field(SXST, "Marble/Quartz Mismatch")
    field(VAL,  "0")
}
record(aao, "$(P)CAL:offset") {
    field(DESC, "Set calibration offsets")
    field(DTYP, "FEED Register Write")
    field(OUT,  "@name=$(PORT) reg=calibrationOffset")
    field(EGU,  "ADC counts")
    field(NELM, "32")
    field(FTVL, "LONG")
    field(PINI, "NO")
    field(DISV, "1")
    field(DISA, "1")
}
record(aai, "$(P)CAL:offsetRbk") {
    field(DESC, "Get calibration offsets")
    field(DTYP, "FEED Register Read")
    field(INP,  "@name=$(PORT) reg=calibrationOffset")
    field(EGU,  "ADC counts")
    field(PINI, "YES")
    field(NELM, "32")
    field(FTVL, "LONG")
}
record(aao, "$(P)CAL:gain") {
    field(DESC, "Set calibration gains")
    field(DTYP, "FEED Register Write")
    field(OUT,  "@name=$(PORT) reg=calibrationGain")
    field(EGU,  "PPM")
    field(NELM, "32")
    field(FTVL, "LONG")
    field(PINI, "NO")
    field(DISV, "1")
    field(DISA, "1")
}
record(aai, "$(P)CAL:gainRbk") {
    field(DESC, "Get calibration gains")
    field(DTYP, "FEED Register Read")
    field(INP,  "@name=$(PORT) reg=calibrationGain")
    field(EGU,  "PPM")
    field(PINI, "YES")
    field(NELM, "32")
    field(FTVL, "LONG")
}
record(longout, "$(P)CAL:date") {
    field(DESC, "Set calibration date")
    field(DTYP, "FEED Register Write")
    field(OUT,  "@name=$(PORT) reg=calibrationDate")
    field(PINI, "NO")
    field(DISV, "1")
    field(DISA, "1")
}
record(longin, "$(P)CAL:dateRbk") {
    field(DESC, "Get calibration date")
    field(DTYP, "FEED Register Read")
    field(INP,  "@name=$(PORT) reg=calibrationDate")
    field(PINI, "YES")
}
record(bo, "$(P)CAL:write") {
    field(DESC, "Write calibration to EEPROM")
    field(DTYP, "FEED Register Write")
    field(OUT,  "@name=$(PORT) reg=calibrationWrite")
    field(ZNAM, "Write")
    field(ONAM, "Write")
    field(PINI, "NO")
    field(DISV, "1")
    field(DISA, "1")
}
