
record("*", "$(P)APP:IPADDR") {
    info(autosaveFields_pass0, "") # inhibit autosave.  IP managed only through iocsh
}

record(longin, "$(P)$(R)C_") {
    field(DTYP, "FEED On Connect")
    field(INP , "@name=$(PORT)")
    field(SCAN, "I/O Intr")
    field(PHAS, "0")
    field(FLNK, "$(P)$(R)C:F_")
}
record(fanout, "$(P)$(R)C:F_") {
    field(LNK1, "$(P)$(R)ACQ:rate_")
    field(LNK2, "$(P)$(R)ACQ:enable:XX_")
    field(LNK3, "$(P)$(R)ACQ:coupling:XX_")
    field(LNK4, "$(P)$(R)ACQ:LOLOlimXX_")
    field(LNK5, "$(P)$(R)ACQ:LOlimXX_")
    field(LNK6, "$(P)$(R)ACQ:HIlimXX_")
    field(LNK7, "$(P)$(R)ACQ:HIHIlimXX_")
}
# flush out array registers previously initialized in perChannel.template during PHAS=-1
record(bo, "$(P)$(R)ACQ:enable:XX_") {
    field(DTYP, "FEED Register Flush")
    field(OUT,  "@name=$(PORT) reg=ACQ:enable:XX")
}
record(bo, "$(P)$(R)ACQ:coupling:XX_") {
    field(DTYP, "FEED Register Flush")
    field(OUT,  "@name=$(PORT) reg=ACQ:coupling:XX")
}
record(bo, "$(P)$(R)ACQ:LOLOlimXX_") {
    field(DTYP, "FEED Register Flush")
    field(OUT,  "@name=$(PORT) reg=ACQ:LOLOlimXX")
}
record(bo, "$(P)$(R)ACQ:LOlimXX_") {
    field(DTYP, "FEED Register Flush")
    field(OUT,  "@name=$(PORT) reg=ACQ:LOlimXX")
}
record(bo, "$(P)$(R)ACQ:HIlimXX_") {
    field(DTYP, "FEED Register Flush")
    field(OUT,  "@name=$(PORT) reg=ACQ:HIlimXX")
}
record(bo, "$(P)$(R)ACQ:HIHIlimXX_") {
    field(DTYP, "FEED Register Flush")
    field(OUT,  "@name=$(PORT) reg=ACQ:HIHIlimXX")
}

record(longin, "$(P)$(R)Quartz:serno") {
    field(DESC, "Quartz IPMI serial number")
    field(DTYP, "FEED Register Read")
    field(INP,  "@name=$(PORT) reg=FMC1:SerialNumber")
    field(PINI, "YES")
}

#
# Downsampling factor
#
record(longout, "$(P)$(R)ACQ:rate_") {
    field(DESC, "Set sampling rate")
    field(DTYP, "FEED Register Write")
    field(OUT,  "@name=$(PORT) reg=ACQ:rate")
    field(OMSL, "closed_loop")
    field(DOL , "$(EVG)ACQ:rateLO_ CPP")
    field(LOPR, "1000")
    field(HOPR, "250000")
    field(DRVL, "1000")
    field(DRVH, "250000")
}

#
# Reboot FPGA
# Driven directly by client
#
record(bo, "$(P)$(R)FPGA:reboot") {
    field(ZNAM, "Boot")
    field(ONAM, "Boot")
    field(FLNK, "$(P)$(R)FPGA:reboot_")
}
record(longout, "$(P)$(R)FPGA:reboot_") {
    field(DESC, "Write 1, 100, 10000 to reboot FPGA")
    field(DTYP, "FEED Register Write")
    field(OUT,  "@name=$(PORT) reg=FPGA:reboot")
    field(VAL , "100")
}

#
# Reset ADCs
#
record(bo, "$(P)$(R)ADC:reset") {
    field(ZNAM, "Reset")
    field(ONAM, "Reset")
    field(FLNK, "$(P)$(R)ADC:reset_")
}
record(longout, "$(P)$(R)ADC:reset_") {
    field(DESC, "Write 40 to reset ADCs")
    field(DTYP, "FEED Register Write")
    field(OUT,  "@name=$(PORT) reg=ADC:reset")
    field(VAL , "40")
}

#
# Drive PLL VCXO DAC
#
record(longout, "$(P)$(R)PLL:VCXO_DAC") {
    field(DESC, "Non-zero to drive VCXO DAC directly")
    field(DTYP, "FEED Register Write")
    field(OUT,  "@name=$(PORT) reg=PLL:VCXO_DAC")
    field(LOPR, "-32768")
    field(HOPR, "32767")
    field(DRVL, "-32768")
    field(DRVH, "32767")
}
